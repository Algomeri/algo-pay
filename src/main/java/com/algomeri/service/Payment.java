package com.algomeri.service;

import java.util.List;
import java.util.Optional;

import com.algomeri.data.ChargeRes;
import com.algomeri.data.PayInit;
import com.algomeri.data.PayTimeline;
import com.algomeri.data.PaymentResponse;
import com.algomeri.data.PaymentVerifier;
import com.algomeri.payload.PaymentParam;
import com.algomeri.payload.PaymentPayload;

/**
 * Contains contract for handling payments from customers plus other useful methods
 * @author Edward Abattam
 * @since 1.0
 */
public interface Payment {

    /**
     * When a payment is initialised , you can either setup a webhook to be notified on the status of the payment, 
     * or directly use this method to poll the status of the payment.
     * 
     * @param identifier -> If using paystack, this is the reference of the transaction
     * @see Payment#initializePayment()
     * @return {@link PaymentVerifier} containing information about the payment
     * 
     */
    public PaymentVerifier verifyPayment(String identifier);

    /**
     *  When multiple payments have been received you can get them using this method 
     * 
     * @param param {@link PaymentParam}
     * @return a list of {@link PaymentResponse}
     */
    public List<PaymentResponse> getPayments(PaymentParam param);

    /**
     * This returns a payment. Can also be used in stead of the verify method
     * @param paymentId -> the id of the payment that was made
     * @return {@link java.util.Optional}<{@link PaymentResponse}>
     */
    public Optional<PaymentResponse> getPayment(String paymentId);
    

    /**
     * This is used to initialize a payment. Most times this is used in cases where:
     * <ol>
     *  <li> You want the reference to be generated by the server and not the client </li>
     *  <li> You want some server processing to prevent race conditions </li>
     *  <li> The customer pays after the service has been rendered </li>
     *  <li> etc </li>
     * </ol>
     * @param payload {@link PaymentPayload}
     * @return {@link PayInit}
     */
    public PayInit initializePayment(PaymentPayload payload);

    /**
     * This retrieves the timeline of a payment if you're interested in getting more data regarding the payment
     * @param identifier -> this is the id of the payment
     * @return {@link PayTimeline}
     */
    public PayTimeline getPaymentTimeline(String identifier);

    /**
     * When an initial payment is made, sometimes, an authorization is returned
     * With this method, you would not need to request authorization before charging a card
     * 
     * @param payload {@link PaymentPayload}
     * @return {@link ChargeRes}
     */
    public ChargeRes chargeAuthorization(PaymentPayload payload);
}
